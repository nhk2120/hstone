}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health", class = "mage")
hsmeta(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", give = "minions")
View(Minions)
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
keyword = "", textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, keyword = keyword, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds))
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), class = "mage", manaCost = 5, attack = 5, orderBy = "health")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
keyword = "", textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, keyword = keyword, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds, druability, imageGold))
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
keyword = "", textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, keyword = keyword, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds, druabillity, imageGold))
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
keyword = "", textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, keyword = keyword, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds, durability, imageGold))
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health", class = "mage")
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
keyword = "", textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, keyword = keyword, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, suppressWarnings(rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds, durability, imageGold)))
assign("Card", hsgd, envir = globalenv())
View(Card)
} else {
warning("The request produced an error.")
}
}
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", manaCost = 2, attack = 3, orderBy = "health", class = "mage")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", orderBy = "manaCost", rarity = "legendary", type = "machine")
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", orderBy = "manaCost", rarity = "legendary")
View(Classes)
hsmeta(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", give = "type")
hsmeta(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", give = "types")
View(Types)
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", orderBy = "manaCost", rarity = "legendary", type = 5)
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", orderBy = "manaCost", rarity = "legendary", type = "spell")
hsmeta(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", give = "minions")
View(Minions)
hscard(id= "61c2e7eece6242c186a4fd7fabd75f16", secret = "ghV3MOD0PUXvJsAR3vVuiXo7wrXfwuBs", minionType = "murloc", textFilter = "Battlecry")
document()
document()
check()
check()
document()
?hsdeck
check()
check()
document()
document()
document()
document()
?hsavgmana
document()
?hsavgmana
check()
document
document()
?topdeckcodes
check()
library(rvest)
check()
install.packages('xml2')
install.packages('xml2')
install.packages("xml2")
library('xml2')
check()
library(devtools)
library(roxygen2)
library(tidyverse)
library(dplyr)
library(httr)
library(rvest)
library(jsonlite)
library(stringr)
document()
check()
check()
check()
topdeckcodes <- function() {
url_all <- "http://metastats.net/decksbyrank/"
all <- read_html(url_all)
question_nodes <- html_nodes(all, ".col-lg-10")
fin <- html_nodes(question_nodes, "button") %>% html_attr("data-clipboard-text")
dn <- str_match(fin, "###(.*?) #")
dn <- as.data.frame(dn[ , 2])
dc <- str_split(fin, "\r\n")
dc <- as.data.frame(sapply(dc, "[", 2))
deckcodes <- as.data.frame(cbind(dn, dc))
deckcodes <- deckcodes %>% rename("deck_name" = 'dn[, 2]', "deck_code" = 'sapply(dc, "[", 2)')
assign("TopDeckCodes", deckcodes, envir = globalenv())
View(TopDeckCodes)
}
topdeckcodes()
topdeckcodes <- function() {
url_all <- "http://metastats.net/decksbyrank/"
all <- read_html(url_all)
question_nodes <- html_nodes(all, ".col-lg-10")
fin <- html_nodes(question_nodes, "button") %>% html_attr("data-clipboard-text")
dn <- str_match(fin, "###(.*?) #")
dn <- as.data.frame(dn[ , 2])
dc <- str_split(fin, "\r\n")
print(dc)
dc <- as.data.frame(sapply(dc, "[", 2))
deckcodes <- as.data.frame(cbind(dn, dc))
deckcodes <- deckcodes %>% rename("deck_name" = 'dn[, 2]', "deck_code" = 'sapply(dc, "[", 2)')
assign("TopDeckCodes", deckcodes, envir = globalenv())
View(TopDeckCodes)
}
topdeckcodes()
a <- c(a,b,c)
alpha <- list(c(a,b,c))
alpha <- list(c)
alpha <- list(c)
alpha
alpha <- list()
alpha
alpha <- list()
alpha <- a
alpha <- list()
alpha <- "a"
alpha
alpha <- list()
alpha <- "a"
exists(alpha[1])
alpha <- list()
alpha <- "a"
exists(alpha[, 1])
alpha <- list()
alpha <- "a"
exists(alpha[1])
alpha <- list()
alpha <- "a"
alpha
exists(alpha[1])
alpha <- list()
alpha <- "a"
alpha
exists(alpha)
alpha <- list()
alpha <- "a"
alpha
nrow(alpha)
alpha <- list()
alpha <- "a"
alpha
n(alpha)
alpha <- list()
alpha <- "a"
alpha
length(alpha)
url_all <- "http://metastats.net/decksbyrank/"
all <- read_html(url_all)
question_nodes <- html_nodes(all, ".col-lg-10")
fin <- html_nodes(question_nodes, "button") %>% html_attr("data-clipboard-text")
dn <- str_match(fin, "###(.*?) #")
dn <- as.data.frame(dn[ , 2])
dc <- str_split(fin, "\r\n")
if (length(dc)){}
dc <- as.data.frame(sapply(dc, "[", 2))
deckcodes <- as.data.frame(cbind(dn, dc))
deckcodes <- deckcodes %>% rename("deck_name" = 'dn[, 2]', "deck_code" = 'sapply(dc, "[", 2)')
fin
dn
length(fin)
url_all <- "http://metastats.net/decksbyrank/"
all <- read_html(url_all)
question_nodes <- html_nodes(all, ".col-lg-10")
fin <- html_nodes(question_nodes, "button") %>% html_attr("data-clipboard-text")
if (length(fin) == 0) {
warning("The new season started and top tier decks are not yet available.")
} else {
dn <- str_match(fin, "###(.*?) #")
dn <- as.data.frame(dn[ , 2])
dc <- str_split(fin, "\r\n")
dc <- as.data.frame(sapply(dc, "[", 2))
deckcodes <- as.data.frame(cbind(dn, dc))
deckcodes <- deckcodes %>% rename("deck_name" = 'dn[, 2]', "deck_code" = 'sapply(dc, "[", 2)')
assign("TopDeckCodes", deckcodes, envir = globalenv())
}
topdeckcodes <- function() {
url_all <- "http://metastats.net/decksbyrank/"
all <- read_html(url_all)
question_nodes <- html_nodes(all, ".col-lg-10")
fin <- html_nodes(question_nodes, "button") %>% html_attr("data-clipboard-text")
if (length(fin) == 0) {
warning("The new season started and top tier decks are not yet available.")
} else {
dn <- str_match(fin, "###(.*?) #")
dn <- as.data.frame(dn[ , 2])
dc <- str_split(fin, "\r\n")
dc <- as.data.frame(sapply(dc, "[", 2))
deckcodes <- as.data.frame(cbind(dn, dc))
deckcodes <- deckcodes %>% rename("deck_name" = 'dn[, 2]', "deck_code" = 'sapply(dc, "[", 2)')
assign("TopDeckCodes", deckcodes, envir = globalenv())
}
}
topdeckcodes
topdeckcodes()
check()
document()
?topdeckcodes
check()
document()
?cardused
check()
check()
document()
?cardused
check()
document()
?hsexpectdeck
document()
check()
document()
?topdeckcodes
?hstopdeckcodes
document()
document()
?hsmeta
?hscard
?hsdeck
?hscard
?hsavgmana
?hstopdeckcodes
?hscardused
?hsexpectdeck
check()
document()
check()
use_vignette("my-vignette")
library(hstone)
knitr::include_graphics("./files/a.PNG")
library(hstone)
godbless()
library(hstone)
hsmeta()
library(hstone)
hstone::hsmeta(id = Sys.getenv("id"), secret = Sys.getenv("secret"), give = "classes")
hstone::hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), rarity = "legendary", type = "spell", orderBy = "manaCost")
hstone::hsdeck(id = Sys.getenv("id"), secret = Sys.getenv("secret"), deckcode = "AAECAaoIAqH4AualAw7TAeAGkwn6qgL28AKP+wKc/wKMhQP2igO0lwPGmQP0mQPUpQPYqQMA")
head(hstone::hsdeck(id = Sys.getenv("id"), secret = Sys.getenv("secret"), deckcode = "AAECAaoIAqH4AualAw7TAeAGkwn6qgL28AKP+wKc/wKMhQP2igO0lwPGmQP0mQPUpQPYqQMA"))
hstone::hsdeck(id = Sys.getenv("id"), secret = Sys.getenv("secret"), deckcode = "AAECAaoIAqH4AualAw7TAeAGkwn6qgL28AKP+wKc/wKMhQP2igO0lwPGmQP0mQPUpQPYqQMA")
hstone::hsavgmana(type = "Deck")
hstone::hsexpectdeck()
hstone::hstopdeckcodes()
hscardused(id = Sys.getenv("id"), secret = Sys.getenv("secret"), used = "high")
hstone::hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), rarity = "legendary", type = "spell", orderBy = "manaCost")
library(hstone)
hstone::hsmeta(id = Sys.getenv("id"), secret = Sys.getenv("secret"), give = "classes")
knit_with_parameters('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/vignettes/hstone_vignette.Rmd')
hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), rarity = "legendary", type = "spell", orderBy = "manaCost")
hscard <- function(id, secret, class = "", manaCost = "", attack = "",
health = "", rarity = "", type = "", minionType = "",
textFilter = "", orderBy = "") {
client_id = id
client_secret = secret
token_resp <- POST(
url = "https://us.battle.net/oauth/token",
config = authenticate(client_id, client_secret),
body = list(grant_type = "client_credentials")
)
token <- content(token_resp)$access_token
ep_card <- "https://us.api.blizzard.com/hearthstone/cards"
bearer_token <- str_c("Bearer", token, sep = " ")
query_params <- list(region = "US", locale = "en_US", class = class, manaCost = manaCost, attack = attack, health = health,
rarity = rarity, type = type, minionType = minionType, textFilter = textFilter, pageSize = 1000)
hsg <- GET(url = ep_card,
config = add_headers(authorization = bearer_token),
query = query_params)
hsgc <- fromJSON(content(hsg, as = "text"))
hsgd <- as.data.frame(hsgc$cards)
if (nrow(hsgd) == 0) {
warning("There are no matching results")
break
}
if (orderBy == "manaCost") {
hsgd <- hsgd %>% arrange(manaCost)
}
if (orderBy == "attack") {
hsgd <- hsgd %>% arrange(attack)
}
if (orderBy == "health") {
hsgd <- hsgd %>% arrange(health)
}
if ((http_status(hsg))$category == "Success") {
hsgd <- within(hsgd, suppressWarnings(rm(id, collectible, slug, multiClassIds, cardSetId, cropImage, childIds, keywordIds, durability, imageGold)))
assign("Card", hsgd, envir = globalenv())
} else {
warning("The request produced an error.")
}
}
hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), rarity = "legendary", type = "spell", orderBy = "manaCost")
hstone::hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), rarity = "legendary", type = "spell", orderBy = "manaCost")
use_readme_rmd()
library(hstone)
hscard(id = Sys.getenv("id"), secret = Sys.getenv("secret"), class = "mage", manaCost = 5, attack = 5, orderBy = "health")
hsdeck(id = Sys.getenv("id"), secret = Sys.getenv("secret"), deckcode = "AAECAaoIAqH4AualAw7TAeAGkwn6qgL28AKP+wKc/wKMhQP2igO0lwPGmQP0mQPUpQPYqQMA")
use_testthat()
source('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/tests/testthat.R', echo=TRUE)
source('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/tests/testthat.R', echo=TRUE)
testthat::auto_test()
test()
test()
source('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/tests/testthat/test-hstone.R', echo=TRUE)
source('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/tests/testthat/test-hstone.R', echo=TRUE)
source('C:/Users/Nam Hee Kim/OneDrive/Syllabus/GR5072 Modern Data Structure M 6pm Jerome Green Law 101/Kim_Namhee/Final_Project/hstone/tests/testthat/test-hstone.R', echo=TRUE)
test()
library(devtools)
install()
install()
install()
library(hstone)
